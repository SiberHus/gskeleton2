<%  if (property.type == Boolean.class || property.type == boolean.class)
        out << renderBooleanEditor(domainClass, property)
    else if (Number.class.isAssignableFrom(property.type) || (property.type.isPrimitive() && property.type != boolean.class))
        out << renderNumberEditor(domainClass, property)
    else if (property.type == String.class)
        out << renderStringEditor(domainClass,property)
    else if (property.type == Date.class || property.type == java.sql.Date.class || property.type == java.sql.Time.class || property.type == java.sql.Timestamp.class)
        out << renderDateEditor(domainClass, property)
    else if (property.type == Calendar.class)
        out << renderDateEditor(domainClass, property)
    else if (property.type == URL.class)
        out << renderStringEditor(domainClass, property)
    else if (property.isEnum())
        out << renderEnumEditor(domainClass, property)
    else if (property.type == TimeZone.class)
        out << renderSelectTypeEditor("timeZone", domainClass, property)
    else if (property.type == Locale.class)
        out << renderSelectTypeEditor("locale", domainClass, property)
    else if (property.type == Currency.class)
        out << renderSelectTypeEditor("currency", domainClass, property)
    else if (property.type==([] as Byte[]).class) //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass, property)
    else if (property.type==([] as byte[]).class) //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass, property)
    else if (property.manyToOne || property.oneToOne)
        out << renderManyToOne(domainClass, property)
    else if ((property.oneToMany && !property.bidirectional) || (property.manyToMany && property.isOwningSide()))
        out << renderManyToMany(domainClass, property)
    else if (property.oneToMany)
        out << renderOneToMany(domainClass, property)
	else {
		System.out.println("What the heck! (type: ${property.type}, name: ${property.name})")
	}
	
    private renderEnumEditor(domainClass, property) {
        if (property.isEnum()) {
            return "<g:select name=\"${property.name}\" from=\"\${${property.type.name}?.values()}\" value=\"\${instance?.${property.name}}\" ${renderNoSelection(property)} class=\"combo\" />"
        }
    }

    private renderStringEditor(domainClass, property) {
        if (!cp) {
            return "<g:textField name=\"${property.name}\" value=\"\${instance?.${property.name}}\" />"
        }
        else {
            if ("textarea" == cp.widget || (cp.maxSize > 250 && !cp.password && !cp.inList)) {
                return "<g:textArea name=\"${property.name}\" rows=\"5\" cols=\"40\" value=\"\${instance?.${property.name}}\" />"
            }
            else {
                if( cp.inList) {
                    return "<g:select name=\"${property.name}\" from=\"\${${domainInstance}.constraints.${property.name}.inList}\" value=\"\${instance.${property?.name}}\" valueMessagePrefix=\"${domainClass.propertyName}.${property?.name}\" ${renderNoSelection(property)} class=\"combo\" />"
                }
                else {
                    def sb = new StringBuffer("<g:${cp.password ? 'passwordField' : 'textField'} name=\"${property.name}\" ")
                    if (cp.maxSize) sb << "maxlength=\"${cp.maxSize}\" "
                    if (!cp.editable) sb << "readonly=\"readonly\" "
                    sb << "value=\"\${instance?.${property.name}}\" />"
                    return sb.toString()
                }
            }
        }
    }

    private renderByteArrayEditor(domainClass, property) {
        return "<input type=\"file\" id=\"${property.name}\" name=\"${property.name}\" />"
    }

    private renderManyToOne(domainClass, property) {
        if (property.association) {
            return "<g:select name=\"${property.name}.id\" from=\"\${${property.type.name}.list()}\" optionKey=\"id\" value=\"\${instance?.${property.name}?.id}\" ${renderNoSelection(property)} class=\"combo\" />"
        }
    }

    private renderManyToMany(domainClass, property) {
        def sw = new StringWriter()
        def pw = new PrintWriter(sw)
	
        pw.println "<g:select name=\"${property.name}\""
        pw.println "	from=\"\${${property.referencedDomainClass.fullName}.list()}\""
        pw.println "	noSelection=\"\${session.noSelection}\""
        pw.println "	size=\"5\" multiple=\"yes\" optionKey=\"id\""
        pw.println "	value=\"\${instance?.${property.name}?.id}\" class=\"gs_multiSelect\" />"
		
        return sw.toString()
    }
	
    private renderOneToMany(domainClass, property) {
        def sw = new StringWriter()
        def pw = new PrintWriter(sw)
        pw.println()
        pw.println "<ul>"
        pw.println "<g:each in=\"\${instance?.${property.name}}\" var=\"${property.referencedDomainClass.propertyName}Instance\">"
        pw.println "    <li><g:link controller=\"${property.referencedDomainClass.propertyName}\" action=\"show\" id=\"\${${property.referencedDomainClass.propertyName}Instance?.id}\">\${${property.referencedDomainClass.propertyName}Instance?.encodeAsHTML()}</g:link></li>"
        pw.println "</g:each>"
        pw.println "</ul>"
        pw.println "<g:link controller=\"${property.referencedDomainClass.propertyName}\" params=\"['${domainClass.propertyName}?.id': instance?.id]\" action=\"create\"><g:message code=\"${property.referencedDomainClass.propertyName}.new\" default=\"New ${property.referencedDomainClass.shortName}\" /></g:link>"
        return sw.toString()
    }

    private renderNumberEditor(domainClass, property) {
        if (!cp) {
            if (property.type == Byte.class) {
                return "<g:select name=\"${property.name}\" from=\"\${-128..127}\" value=\"\${instance?.${property.name}}\" class=\"combo\" />"
            }
            else {
                return "<g:textField name=\"${property.name}\" value=\"\${instance?.${property.name}}\" class=\"decimal\" />"
            }
        }
        else {
            if (cp.range) {
                return "<g:select name=\"${property.name}\" from=\"\${${cp.range.from}..${cp.range.to}}\" value=\"\${instance?.${property.name}}\" ${renderNoSelection(property)} class=\"combo\" />"
            }
            else if (cp.inList) {
                return "<g:select name=\"${property.name}\" from=\"\${${domainInstance}.constraints.${property.name}.inList}\" value=\"\${${domainClass.propertyName}.${property?.name}}\" valueMessagePrefix=\"${domainClass.propertyName}.${property?.name}\" ${renderNoSelection(property)} class=\"combo\" />"
            }
            else if (property.type == Byte.class) {
                return "<g:select name=\"${property.name}\" from=\"\${-128..127}\" value=\"\${instance?.${property.name}}\" ${renderNoSelection(property)} class=\"combo\" />"
            }
            else {
                return "<g:textField name=\"${property.name}\" value=\"\${instance?.${property.name}}\" class=\"decimal\" />"
            }
        }
     }

    private renderBooleanEditor(domainClass, property) {
        if (!cp) {
            return "<g:checkBox name=\"${property.name}\" value=\"\${instance?.${property.name}}\" />"
        }
        else {
            def sb = new StringBuffer("<g:checkBox name=\"${property.name}\" ")
            if (cp.widget) sb << "widget=\"${cp.widget}\" "
            sb << "value=\"\${instance?.${property.name}}\" "
            cp.attributes.each { k, v ->
                sb << "${k}=\"${v}\" "
            }
            sb << "/>"
            return sb.toString()
        }
    }
    
	private renderDateEditor(domainClass, property) {
		
		if (!cp) {
            //return "<g:textField name=\"${property.name}\" value=\"\${instance?.${property.name}}\" class=\"datePicker\" />"
        }else{
        	if (!cp.editable) {
        		if(property.type==java.util.Date || property.type==java.sql.Date){
                	return "\${ gs.formatDate(date:instance?.${property.name})}"
                }else if(property.type==java.sql.Timestamp || property.type==java.util.Calendar){
                	return "\${ gs.formatDatetime(date:instance?.${property.name})}"
                }else if(property.type==java.sql.Time){
                	return "\${ gs.formatTime(date:instance?.${property.name})}"
                }else{
                	return "\${instance?.${property.name}?.toString()}"
                }
            } else {
            	//return "<g:textField name=\"${property.name}\" value=\"\${instance?.${property.name}}\" class=\"datePicker\" />"
            }
        }
        if(property.type==java.util.Date || property.type==java.sql.Date){
             return "<g:textField name=\"${property.name}\" value=\"\${ gs.formatDate(date:instance?.${property.name})}\" class=\"date\" />"
        }else if(property.type==java.sql.Timestamp || property.type==java.util.Calendar){
            return "<g:textField name=\"${property.name}\" value=\"\${ gs.formatDatetime(date:instance?.${property.name})}\" class=\"datetime\" />"
        }else if(property.type==java.sql.Time){
        	return "<g:textField name=\"${property.name}\" value=\"\${ gs.formatTime(date:instance?.${property.name})}\" class=\"time\" />"
        }else{
           	return "<g:textField name=\"${property.name}\" value=\"\${instance?.${property.name}}\" />"
        }
	}
	/*
    private renderDateEditor(domainClass, property) {
        if (!cp) {
            return "<g:datePicker name=\"${property.name}\" value=\"\${instance?.${property.name}}\" />"
        }
        else {
            if (!cp.editable) {
                return "\${instance?.${property.name}?.toString()}"
            }
            else {
                def sb = new StringBuffer("<g:datePicker name=\"${property.name}\" ")
                if (cp.widget) sb << "widget=\"${cp.widget}\" "
                if (cp.format) sb << "format=\"${cp.format}\" "
                cp.attributes.each { k, v ->
                    sb << "${k}=\"${v}\" "
                }
                sb << "value=\"\${instance?.${property.name}}\" ${renderNoSelection(property)} />"
                return sb.toString()
            }
        }
    }
	*/
    private renderSelectTypeEditor(type, domainClass, property) {
        if (!cp) {
            return "<g:${type}Select name=\"${property.name}\" value=\"\${instance?.${property.name}}\" />"
        }
        else {
            def sb = new StringBuffer("<g:${type}Select name=\"${property.name}\" ")
            if (cp.widget) sb << "widget=\"${cp.widget}\" "
            cp.attributes.each { k, v ->
                sb << "${k}=\"${v}\" "
            }
            sb << "value=\"\${instance?.${property.name}}\" ${renderNoSelection(property)} />"
            return sb.toString()
        }
    }
	
    private renderNoSelection(property) {
        if (property.optional) {
            if (property.manyToOne || property.oneToOne) {
                return "noSelection=\"['null': 'Select One...']\""
            }
            else {
                return "noSelection=\"['': 'Select One...']\""
            }
        }
        return "noSelection=\"['': 'Select One...']\""
    }
%>
